// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc721(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidated_at(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get reason(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LoanInitiated extends ethereum.Event {
  get params(): LoanInitiated__Params {
    return new LoanInitiated__Params(this);
  }
}

export class LoanInitiated__Params {
  _event: LoanInitiated;

  constructor(event: LoanInitiated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc721(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get loan(): LoanInitiatedLoanStruct {
    return this._event.parameters[3].value.toTuple() as LoanInitiatedLoanStruct;
  }
}

export class LoanInitiatedLoanStruct extends ethereum.Tuple {
  get loanStartBlock(): BigInt {
    return this[0].toBigInt();
  }

  get loanExpireTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get interestBPS1000000XBlock(): BigInt {
    return this[2].toBigInt();
  }

  get maxLTVBPS(): BigInt {
    return this[3].toBigInt();
  }

  get borrowedWei(): BigInt {
    return this[4].toBigInt();
  }

  get returnedWei(): BigInt {
    return this[5].toBigInt();
  }

  get accuredInterestWei(): BigInt {
    return this[6].toBigInt();
  }

  get repaidInterestWei(): BigInt {
    return this[7].toBigInt();
  }

  get borrower(): Address {
    return this[8].toAddress();
  }
}

export class LoanTermsChanged extends ethereum.Event {
  get params(): LoanTermsChanged__Params {
    return new LoanTermsChanged__Params(this);
  }
}

export class LoanTermsChanged__Params {
  _event: LoanTermsChanged;

  constructor(event: LoanTermsChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc721(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get oldTerms(): LoanTermsChangedOldTermsStruct {
    return this._event.parameters[3].value.toTuple() as LoanTermsChangedOldTermsStruct;
  }

  get newTerms(): LoanTermsChangedNewTermsStruct {
    return this._event.parameters[4].value.toTuple() as LoanTermsChangedNewTermsStruct;
  }
}

export class LoanTermsChangedOldTermsStruct extends ethereum.Tuple {
  get loanStartBlock(): BigInt {
    return this[0].toBigInt();
  }

  get loanExpireTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get interestBPS1000000XBlock(): BigInt {
    return this[2].toBigInt();
  }

  get maxLTVBPS(): BigInt {
    return this[3].toBigInt();
  }

  get borrowedWei(): BigInt {
    return this[4].toBigInt();
  }

  get returnedWei(): BigInt {
    return this[5].toBigInt();
  }

  get accuredInterestWei(): BigInt {
    return this[6].toBigInt();
  }

  get repaidInterestWei(): BigInt {
    return this[7].toBigInt();
  }

  get borrower(): Address {
    return this[8].toAddress();
  }
}

export class LoanTermsChangedNewTermsStruct extends ethereum.Tuple {
  get loanStartBlock(): BigInt {
    return this[0].toBigInt();
  }

  get loanExpireTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get interestBPS1000000XBlock(): BigInt {
    return this[2].toBigInt();
  }

  get maxLTVBPS(): BigInt {
    return this[3].toBigInt();
  }

  get borrowedWei(): BigInt {
    return this[4].toBigInt();
  }

  get returnedWei(): BigInt {
    return this[5].toBigInt();
  }

  get accuredInterestWei(): BigInt {
    return this[6].toBigInt();
  }

  get repaidInterestWei(): BigInt {
    return this[7].toBigInt();
  }

  get borrower(): Address {
    return this[8].toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ERC721LendingPoolETH01___loansResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    return map;
  }
}

export class ERC721LendingPoolETH01__durationSeconds_poolParamResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ERC721LendingPoolETH01__isUnHealthyLoanResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ERC721LendingPoolETH01 extends ethereum.SmartContract {
  static bind(address: Address): ERC721LendingPoolETH01 {
    return new ERC721LendingPoolETH01("ERC721LendingPoolETH01", address);
  }

  _loans(param0: BigInt): ERC721LendingPoolETH01___loansResult {
    let result = super.call(
      "_loans",
      "_loans(uint256):(uint256,uint256,uint32,uint32,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ERC721LendingPoolETH01___loansResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toAddress()
    );
  }

  try__loans(
    param0: BigInt
  ): ethereum.CallResult<ERC721LendingPoolETH01___loansResult> {
    let result = super.tryCall(
      "_loans",
      "_loans(uint256):(uint256,uint256,uint32,uint32,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721LendingPoolETH01___loansResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toAddress()
      )
    );
  }

  _supportedCollection(): Address {
    let result = super.call(
      "_supportedCollection",
      "_supportedCollection():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__supportedCollection(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_supportedCollection",
      "_supportedCollection():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _valuationSigner(): Address {
    let result = super.call(
      "_valuationSigner",
      "_valuationSigner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__valuationSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_valuationSigner",
      "_valuationSigner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  durationSeconds_poolParam(
    param0: BigInt
  ): ERC721LendingPoolETH01__durationSeconds_poolParamResult {
    let result = super.call(
      "durationSeconds_poolParam",
      "durationSeconds_poolParam(uint256):(uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ERC721LendingPoolETH01__durationSeconds_poolParamResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_durationSeconds_poolParam(
    param0: BigInt
  ): ethereum.CallResult<
    ERC721LendingPoolETH01__durationSeconds_poolParamResult
  > {
    let result = super.tryCall(
      "durationSeconds_poolParam",
      "durationSeconds_poolParam(uint256):(uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721LendingPoolETH01__durationSeconds_poolParamResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getEthSignedMessageHash(_messageHash: Bytes): Bytes {
    let result = super.call(
      "getEthSignedMessageHash",
      "getEthSignedMessageHash(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_messageHash)]
    );

    return result[0].toBytes();
  }

  try_getEthSignedMessageHash(_messageHash: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getEthSignedMessageHash",
      "getEthSignedMessageHash(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(_messageHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getMessageHash(
    nft: Address,
    punkID: BigInt,
    valuation: BigInt,
    expireAtBlock: BigInt
  ): Bytes {
    let result = super.call(
      "getMessageHash",
      "getMessageHash(address,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(punkID),
        ethereum.Value.fromUnsignedBigInt(valuation),
        ethereum.Value.fromUnsignedBigInt(expireAtBlock)
      ]
    );

    return result[0].toBytes();
  }

  try_getMessageHash(
    nft: Address,
    punkID: BigInt,
    valuation: BigInt,
    expireAtBlock: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getMessageHash",
      "getMessageHash(address,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(punkID),
        ethereum.Value.fromUnsignedBigInt(valuation),
        ethereum.Value.fromUnsignedBigInt(expireAtBlock)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isUnHealthyLoan(
    nftID: BigInt
  ): ERC721LendingPoolETH01__isUnHealthyLoanResult {
    let result = super.call(
      "isUnHealthyLoan",
      "isUnHealthyLoan(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(nftID)]
    );

    return new ERC721LendingPoolETH01__isUnHealthyLoanResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_isUnHealthyLoan(
    nftID: BigInt
  ): ethereum.CallResult<ERC721LendingPoolETH01__isUnHealthyLoanResult> {
    let result = super.tryCall(
      "isUnHealthyLoan",
      "isUnHealthyLoan(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721LendingPoolETH01__isUnHealthyLoanResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  outstanding(nftID: BigInt): BigInt {
    let result = super.call("outstanding", "outstanding(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(nftID)
    ]);

    return result[0].toBigInt();
  }

  try_outstanding(nftID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "outstanding",
      "outstanding(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nftID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verify(
    nft: Address,
    punkID: BigInt,
    valuation: BigInt,
    expireAtBlock: BigInt,
    _signer: Address,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "verify",
      "verify(address,uint256,uint256,uint256,address,bytes):(bool)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(punkID),
        ethereum.Value.fromUnsignedBigInt(valuation),
        ethereum.Value.fromUnsignedBigInt(expireAtBlock),
        ethereum.Value.fromAddress(_signer),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBoolean();
  }

  try_verify(
    nft: Address,
    punkID: BigInt,
    valuation: BigInt,
    expireAtBlock: BigInt,
    _signer: Address,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(address,uint256,uint256,uint256,address,bytes):(bool)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(punkID),
        ethereum.Value.fromUnsignedBigInt(valuation),
        ethereum.Value.fromUnsignedBigInt(expireAtBlock),
        ethereum.Value.fromAddress(_signer),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BorrowETHCall extends ethereum.Call {
  get inputs(): BorrowETHCall__Inputs {
    return new BorrowETHCall__Inputs(this);
  }

  get outputs(): BorrowETHCall__Outputs {
    return new BorrowETHCall__Outputs(this);
  }
}

export class BorrowETHCall__Inputs {
  _call: BorrowETHCall;

  constructor(call: BorrowETHCall) {
    this._call = call;
  }

  get valuation(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get loanDurationSeconds(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expireAtBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get borrowedWei(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class BorrowETHCall__Outputs {
  _call: BorrowETHCall;

  constructor(call: BorrowETHCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawLoanCollateralCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawLoanCollateralCall__Inputs {
    return new EmergencyWithdrawLoanCollateralCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawLoanCollateralCall__Outputs {
    return new EmergencyWithdrawLoanCollateralCall__Outputs(this);
  }
}

export class EmergencyWithdrawLoanCollateralCall__Inputs {
  _call: EmergencyWithdrawLoanCollateralCall;

  constructor(call: EmergencyWithdrawLoanCollateralCall) {
    this._call = call;
  }

  get nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get withdrawToOwner(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class EmergencyWithdrawLoanCollateralCall__Outputs {
  _call: EmergencyWithdrawLoanCollateralCall;

  constructor(call: EmergencyWithdrawLoanCollateralCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get supportedCollection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateLoanCall extends ethereum.Call {
  get inputs(): LiquidateLoanCall__Inputs {
    return new LiquidateLoanCall__Inputs(this);
  }

  get outputs(): LiquidateLoanCall__Outputs {
    return new LiquidateLoanCall__Outputs(this);
  }
}

export class LiquidateLoanCall__Inputs {
  _call: LiquidateLoanCall;

  constructor(call: LiquidateLoanCall) {
    this._call = call;
  }

  get nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateLoanCall__Outputs {
  _call: LiquidateLoanCall;

  constructor(call: LiquidateLoanCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayETHCall extends ethereum.Call {
  get inputs(): RepayETHCall__Inputs {
    return new RepayETHCall__Inputs(this);
  }

  get outputs(): RepayETHCall__Outputs {
    return new RepayETHCall__Outputs(this);
  }
}

export class RepayETHCall__Inputs {
  _call: RepayETHCall;

  constructor(call: RepayETHCall) {
    this._call = call;
  }

  get nftID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayETHCall__Outputs {
  _call: RepayETHCall;

  constructor(call: RepayETHCall) {
    this._call = call;
  }
}

export class SetDurationParamCall extends ethereum.Call {
  get inputs(): SetDurationParamCall__Inputs {
    return new SetDurationParamCall__Inputs(this);
  }

  get outputs(): SetDurationParamCall__Outputs {
    return new SetDurationParamCall__Outputs(this);
  }
}

export class SetDurationParamCall__Inputs {
  _call: SetDurationParamCall;

  constructor(call: SetDurationParamCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ppm(): SetDurationParamCallPpmStruct {
    return this._call.inputValues[1].value.toTuple() as SetDurationParamCallPpmStruct;
  }
}

export class SetDurationParamCall__Outputs {
  _call: SetDurationParamCall;

  constructor(call: SetDurationParamCall) {
    this._call = call;
  }
}

export class SetDurationParamCallPpmStruct extends ethereum.Tuple {
  get interestBPS1000000XBlock(): BigInt {
    return this[0].toBigInt();
  }

  get collateralFactorBPS(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetValuationSignerCall extends ethereum.Call {
  get inputs(): SetValuationSignerCall__Inputs {
    return new SetValuationSignerCall__Inputs(this);
  }

  get outputs(): SetValuationSignerCall__Outputs {
    return new SetValuationSignerCall__Outputs(this);
  }
}

export class SetValuationSignerCall__Inputs {
  _call: SetValuationSignerCall;

  constructor(call: SetValuationSignerCall) {
    this._call = call;
  }

  get valuationSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetValuationSignerCall__Outputs {
  _call: SetValuationSignerCall;

  constructor(call: SetValuationSignerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawERC20Call extends ethereum.Call {
  get inputs(): WithdrawERC20Call__Inputs {
    return new WithdrawERC20Call__Inputs(this);
  }

  get outputs(): WithdrawERC20Call__Outputs {
    return new WithdrawERC20Call__Outputs(this);
  }
}

export class WithdrawERC20Call__Inputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawERC20Call__Outputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }
}

export class WithdrawERC721Call extends ethereum.Call {
  get inputs(): WithdrawERC721Call__Inputs {
    return new WithdrawERC721Call__Inputs(this);
  }

  get outputs(): WithdrawERC721Call__Outputs {
    return new WithdrawERC721Call__Outputs(this);
  }
}

export class WithdrawERC721Call__Inputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawERC721Call__Outputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }
}
